//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoCommonErrorGenerator.
// DO NOT EDIT.

extension TCCommonError {
    public struct RequestLimitExceeded: TCErrorType {
        enum Code: String {
            case globalRegionUinLimitExceeded = "RequestLimitExceeded.GlobalRegionUinLimitExceeded"
            case ipLimitExceeded = "RequestLimitExceeded.IPLimitExceeded"
            case uinLimitExceeded = "RequestLimitExceeded.UinLimitExceeded"
            case other = "RequestLimitExceeded"
        }
        
        private let error: Code
        
        public let context: TCErrorContext?
        
        public var errorCode: String {
            self.error.rawValue
        }
        
        public init ?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }
        
        internal init (_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }
        
        /// 主账号超过频率限制。
        public static var globalRegionUinLimitExceeded: RequestLimitExceeded {
            RequestLimitExceeded(.globalRegionUinLimitExceeded)
        }
        
        /// IP限频。
        public static var ipLimitExceeded: RequestLimitExceeded {
            RequestLimitExceeded(.ipLimitExceeded)
        }
        
        /// 主账号限频。
        public static var uinLimitExceeded: RequestLimitExceeded {
            RequestLimitExceeded(.uinLimitExceeded)
        }
        
        /// The number of requests exceeds the frequency limit. / 请求的次数超过了频率限制。
        public static var other: RequestLimitExceeded {
            RequestLimitExceeded(.other)
        }
    }
}

extension TCCommonError.RequestLimitExceeded: Equatable {
    public static func == (lhs: TCCommonError.RequestLimitExceeded, rhs: TCCommonError.RequestLimitExceeded) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCCommonError.RequestLimitExceeded: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}

extension TCCommonError.RequestLimitExceeded {
    public func toCommonError() -> TCCommonError? {
        guard let code = TCCommonError.Code(rawValue: self.errorCode) else {
            return nil
        }
        return TCCommonError(code, context: self.context)
    }
}