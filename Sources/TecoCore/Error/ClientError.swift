//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoCommonErrorGenerator.
// DO NOT EDIT.

public struct TCClientError: TCErrorType {
    enum Code: String {
        case actionOffline = "ActionOffline"
        case authFailure_InvalidAuthorization = "AuthFailure.InvalidAuthorization"
        case authFailure_InvalidSecretId = "AuthFailure.InvalidSecretId"
        case authFailure_MFAFailure = "AuthFailure.MFAFailure"
        case authFailure_SecretIdNotFound = "AuthFailure.SecretIdNotFound"
        case authFailure_SignatureExpire = "AuthFailure.SignatureExpire"
        case authFailure_SignatureFailure = "AuthFailure.SignatureFailure"
        case authFailure_TokenFailure = "AuthFailure.TokenFailure"
        case authFailure_UnauthorizedOperation = "AuthFailure.UnauthorizedOperation"
        case dryRunOperation = "DryRunOperation"
        case failedOperation = "FailedOperation"
        case invalidAction = "InvalidAction"
        case invalidParameter = "InvalidParameter"
        case invalidParameterValue = "InvalidParameterValue"
        case invalidRequest = "InvalidRequest"
        case ipInBlacklist = "IpInBlacklist"
        case ipNotInWhitelist = "IpNotInWhitelist"
        case limitExceeded = "LimitExceeded"
        case missingParameter = "MissingParameter"
        case noSuchProduct = "NoSuchProduct"
        case noSuchVersion = "NoSuchVersion"
        case requestLimitExceeded = "RequestLimitExceeded"
        case requestLimitExceeded_GlobalRegionUinLimitExceeded = "RequestLimitExceeded.GlobalRegionUinLimitExceeded"
        case requestLimitExceeded_IPLimitExceeded = "RequestLimitExceeded.IPLimitExceeded"
        case requestLimitExceeded_UinLimitExceeded = "RequestLimitExceeded.UinLimitExceeded"
        case requestSizeLimitExceeded = "RequestSizeLimitExceeded"
        case resourceInUse = "ResourceInUse"
        case resourceInsufficient = "ResourceInsufficient"
        case resourceNotFound = "ResourceNotFound"
        case resourceUnavailable = "ResourceUnavailable"
        case unauthorizedOperation = "UnauthorizedOperation"
        case unknownParameter = "UnknownParameter"
        case unsupportedOperation = "UnsupportedOperation"
        case unsupportedProtocol = "UnsupportedProtocol"
        case unsupportedRegion = "UnsupportedRegion"
    }
    
    private let error: Code
    
    public let context: TCErrorContext?
    
    public var errorCode: String {
        self.error.rawValue
    }
    
    /// Initialize TCClientError.
    public init ?(errorCode: String, context: TCErrorContext) {
        guard let error = Code(rawValue: errorCode) else {
            return nil
        }
        self.error = error
        self.context = context
    }
    
    internal init (_ error: Code, context: TCErrorContext? = nil) {
        self.error = error
        self.context = context
    }
    
    public enum AuthFailure {
        /// 请求头部的Authorization不符合腾讯云标准。
        public static var invalidAuthorization: TCClientError {
            TCClientError(.authFailure_InvalidAuthorization)
        }
        
        /// Invalid key (not a TencentCloud API key type). / 密钥非法（不是云API密钥类型）。
        public static var invalidSecretId: TCClientError {
            TCClientError(.authFailure_InvalidSecretId)
        }
        
        /// MFA failed. / MFA错误。
        public static var mfaFailure: TCClientError {
            TCClientError(.authFailure_MFAFailure)
        }
        
        /// The key does not exist. / 密钥不存在。请在控制台检查密钥是否已被删除或者禁用，如状态正常，请检查密钥是否填写正确，注意前后不得有空格。
        public static var secretIdNotFound: TCClientError {
            TCClientError(.authFailure_SecretIdNotFound)
        }
        
        /// Signature expired. / 签名过期。Timestamp和服务器时间相差不得超过五分钟，请检查本地时间是否和标准时间同步。
        public static var signatureExpire: TCClientError {
            TCClientError(.authFailure_SignatureExpire)
        }
        
        /// Signature error. / 签名错误。签名计算错误，请对照调用方式中的签名方法文档检查签名计算过程。
        public static var signatureFailure: TCClientError {
            TCClientError(.authFailure_SignatureFailure)
        }
        
        /// Token error. / token错误。
        public static var tokenFailure: TCClientError {
            TCClientError(.authFailure_TokenFailure)
        }
        
        /// The request does not have CAM authorization. / 请求未授权。请参考CAM文档对鉴权的说明。
        public static var unauthorizedOperation: TCClientError {
            TCClientError(.authFailure_UnauthorizedOperation)
        }
    }
    
    public enum RequestLimitExceeded {
        /// 主账号超过频率限制。
        public static var globalRegionUinLimitExceeded: TCClientError {
            TCClientError(.requestLimitExceeded_GlobalRegionUinLimitExceeded)
        }
        
        /// IP限频。
        public static var ipLimitExceeded: TCClientError {
            TCClientError(.requestLimitExceeded_IPLimitExceeded)
        }
        
        /// 主账号限频。
        public static var uinLimitExceeded: TCClientError {
            TCClientError(.requestLimitExceeded_UinLimitExceeded)
        }
    }
    
    /// 接口已下线。
    public static var actionOffline: TCClientError {
        TCClientError(.actionOffline)
    }
    
    /// DryRun Operation. It means that the request would have succeeded, but the DryRun parameter was used. / DryRun操作，代表请求将会是成功的，只是多传了DryRun参数。
    public static var dryRunOperation: TCClientError {
        TCClientError(.dryRunOperation)
    }
    
    /// Operation failed. / 操作失败。
    public static var failedOperation: TCClientError {
        TCClientError(.failedOperation)
    }
    
    /// The API does not exist. / 接口不存在。
    public static var invalidAction: TCClientError {
        TCClientError(.invalidAction)
    }
    
    /// Incorrect parameter. / 参数错误（包括参数格式、类型等错误）。
    public static var invalidParameter: TCClientError {
        TCClientError(.invalidParameter)
    }
    
    /// Invalid parameter value. / 参数取值错误。
    public static var invalidParameterValue: TCClientError {
        TCClientError(.invalidParameterValue)
    }
    
    /// 请求body的multipart格式错误。
    public static var invalidRequest: TCClientError {
        TCClientError(.invalidRequest)
    }
    
    /// IP地址在黑名单中。
    public static var ipInBlacklist: TCClientError {
        TCClientError(.ipInBlacklist)
    }
    
    /// IP地址不在白名单中。
    public static var ipNotInWhitelist: TCClientError {
        TCClientError(.ipNotInWhitelist)
    }
    
    /// Quota limit exceeded. / 超过配额限制。
    public static var limitExceeded: TCClientError {
        TCClientError(.limitExceeded)
    }
    
    /// A parameter is missing. / 缺少参数。
    public static var missingParameter: TCClientError {
        TCClientError(.missingParameter)
    }
    
    /// 产品不存在。
    public static var noSuchProduct: TCClientError {
        TCClientError(.noSuchProduct)
    }
    
    /// The API version does not exist. / 接口版本不存在。
    public static var noSuchVersion: TCClientError {
        TCClientError(.noSuchVersion)
    }
    
    /// The number of requests exceeds the frequency limit. / 请求的次数超过了频率限制。
    public static var requestLimitExceeded: TCClientError {
        TCClientError(.requestLimitExceeded)
    }
    
    /// 请求包超过限制大小。
    public static var requestSizeLimitExceeded: TCClientError {
        TCClientError(.requestSizeLimitExceeded)
    }
    
    /// Resource is in use. / 资源被占用。
    public static var resourceInUse: TCClientError {
        TCClientError(.resourceInUse)
    }
    
    /// Insufficient resource. / 资源不足。
    public static var resourceInsufficient: TCClientError {
        TCClientError(.resourceInsufficient)
    }
    
    /// The resource does not exist. / 资源不存在。
    public static var resourceNotFound: TCClientError {
        TCClientError(.resourceNotFound)
    }
    
    /// Resource is unavailable. / 资源不可用。
    public static var resourceUnavailable: TCClientError {
        TCClientError(.resourceUnavailable)
    }
    
    /// Unauthorized operation. / 未授权操作。
    public static var unauthorizedOperation: TCClientError {
        TCClientError(.unauthorizedOperation)
    }
    
    /// Unknown parameter. / 未知参数错误，用户多传未定义的参数会导致错误。
    public static var unknownParameter: TCClientError {
        TCClientError(.unknownParameter)
    }
    
    /// Unsupported operation. / 操作不支持。
    public static var unsupportedOperation: TCClientError {
        TCClientError(.unsupportedOperation)
    }
    
    /// HTTPS request method error. Only GET and POST requests are supported. / http(s)请求协议错误，只支持GET和POST请求。
    public static var unsupportedProtocol: TCClientError {
        TCClientError(.unsupportedProtocol)
    }
    
    /// API does not support the requested region. / 接口不支持所传地域。
    public static var unsupportedRegion: TCClientError {
        TCClientError(.unsupportedRegion)
    }
}

extension TCClientError: Equatable {
    public static func == (lhs: TCClientError, rhs: TCClientError) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCClientError: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}