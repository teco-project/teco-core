//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project.
//
// Copyright (c) 2022 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Teco project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoCommonErrorGenerator.
// DO NOT EDIT.

public struct TCServerError: TCErrorType {
    enum Code: String {
        case internalError = "InternalError"
        case responseSizeLimitExceeded = "ResponseSizeLimitExceeded"
        case serviceUnavailable = "ServiceUnavailable"
    }
    
    private let error: Code
    
    public let context: TCErrorContext?
    
    public var errorCode: String {
        self.error.rawValue
    }
    
    /// Initialize TCServerError.
    public init ?(errorCode: String, context: TCErrorContext) {
        guard let error = Code(rawValue: errorCode) else {
            return nil
        }
        self.error = error
        self.context = context
    }
    
    internal init (_ error: Code, context: TCErrorContext? = nil) {
        self.error = error
        self.context = context
    }
    
    /// Internal error. / 内部错误。
    public static var internalError: TCServerError {
        TCServerError(.internalError)
    }
    
    /// 返回包超过限制大小。
    public static var responseSizeLimitExceeded: TCServerError {
        TCServerError(.responseSizeLimitExceeded)
    }
    
    /// 当前服务暂时不可用。
    public static var serviceUnavailable: TCServerError {
        TCServerError(.serviceUnavailable)
    }
}

extension TCServerError: Equatable {
    public static func == (lhs: TCServerError, rhs: TCServerError) -> Bool {
        lhs.error == rhs.error
    }
}

extension TCServerError: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(message ?? "")"
    }
}